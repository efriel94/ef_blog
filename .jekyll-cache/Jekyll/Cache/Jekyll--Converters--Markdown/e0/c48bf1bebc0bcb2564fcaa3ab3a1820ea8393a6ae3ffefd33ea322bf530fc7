I"<h1 id="introduction">Introduction</h1>

<p>Its common to have multiple Git identities when working across different projects which can be difficult to manage but for the majority of us we usually have two git identities for signing commits: one for work use and one for personal use. This tutorial explains how to switch git identities automatically based on what directory your in.<br /></p>

<h1 id="prerequisites">Prerequisites</h1>

<ul>
  <li>Two GPG keys generated for two different emails. Refer to the <a href="https://docs.github.com/en/enterprise/2.13/user/articles/generating-a-new-gpg-key">Git Documentation on GPG</a><br /><br /></li>
</ul>

<h1 id="configuring-multiple-git-identities">Configuring multiple git identities</h1>

<p>The main Git configuration file is <code class="language-plaintext highlighter-rouge">.gitconfig</code> which can be found in the <code class="language-plaintext highlighter-rouge">$HOME</code> directory and is specfic to each user. Create two new git configuration files for work and personal use, see below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-rw-r--r--</span>  1 John John  234 May  8 15:52  .gitconfig
<span class="nt">-rw-r--r--</span>  1 John John   95 Sep 20 15:02  .gitconfig-local
<span class="nt">-rw-r--r--</span>  1 John John  137 Sep 20 15:02  .gitconfig-work
</code></pre></div></div>

<p>By default we are going to configure git to use our personal git identity for everything unless we are in a specific directory. Open up <code class="language-plaintext highlighter-rouge">.gitconfig-local</code> with a text editor and insert the contents based on your personal git identity:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emmet@homepc:~<span class="nv">$ </span><span class="nb">cat</span> .gitconfig-local 
<span class="o">[</span>user]
  name <span class="o">=</span> John Doe
  email <span class="o">=</span> johndoe@hotmail.co.uk
  signingkey <span class="o">=</span> OEE3389VBDJH4531
</code></pre></div></div>

<p><strong>Note: You can find the key ID for your GPG secret key via <code class="language-plaintext highlighter-rouge">gpg --list-secret-keys --keyid-format LONG</code> which is then <code class="language-plaintext highlighter-rouge">sec   rsa3072/OEE3389VBDJH4531</code></strong></p>

<p>Save and Exit. Repeat the same for <code class="language-plaintext highlighter-rouge">.gitconfig-work</code> replacing name, email and signingkey ID with your git identity for work.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emmet@homepc:~<span class="nv">$ </span><span class="nb">cat</span> .gitconfig-work 
<span class="o">[</span>user]
  name <span class="o">=</span> John Doe
  email <span class="o">=</span> johndoe@company.net
  signingkey <span class="o">=</span> BM2095449YAW90L1
</code></pre></div></div>

<p>Save and Exit. Create a new folder in Documents directory called <code class="language-plaintext highlighter-rouge">work-projects</code> which will be used for work related projects. Open the main git configuration file: <code class="language-plaintext highlighter-rouge">.gitconfig</code> and append the following to the file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># default case</span>
<span class="o">[</span>include]
        path <span class="o">=</span> ~/.gitconfig-local

<span class="o">[</span>includeIf <span class="s2">"gitdir:~/Documents/work-projects/**/.git"</span><span class="o">]</span>
        path <span class="o">=</span> ~/.gitconfig-work
</code></pre></div></div>

<p>The includeIf condition allows us to automatically switch git identities when inside the work-projects directory to <code class="language-plaintext highlighter-rouge">.gitconfig-work</code>.<br /><br /></p>

<h1 id="test-automated-switching">Test automated switching</h1>

<p>Git should now automatically detect the git identity based on the directory you are in. Run the following commands in your home directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emmet@homepc:~<span class="nv">$ </span><span class="nb">pwd</span>
/home/john
emmet@homepc:~<span class="nv">$ </span>git config user.email 
johndoe@hotmail.co.uk
emmet@homepc:~<span class="nv">$ </span>git config user.signingKey 
OEE3389VBDJH4531
</code></pre></div></div>

<p>Git detects our configuration based on <code class="language-plaintext highlighter-rouge">.gitconfig-local</code>. Navigate into <code class="language-plaintext highlighter-rouge">Documents/work-projects</code>, clone any git project into work-projects directory, cd into it and then run the following commands again:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emmet@homepc:~/Documents/work-projects/tictactoe<span class="nv">$ </span>git config user.email 
johndoe@company.net
emmet@homepc:~/Documents/work-projects/tictactoe<span class="nv">$ </span>git config user.signingKey 
BM2095449YAW90L1
</code></pre></div></div>

<p>You can see Git automatically switching identities based on directories allowing us to manage multiple GPG keys when signing commits.</p>

:ET